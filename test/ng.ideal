# Make a terminal expression optional.
OPT<X>        -->   ''
OPT<X>        -->   X, ''

OPT<X>        -->   ''
OPT<X>        -->   X, ''



# Make a list.  X is the terminal expression, D is the list delimeter
LIST<X,D>          -->  X, OPT<D,X>*, ''


# Strings
STRING_FORM<L,R>  --> L, [^L,R]*, R, ''

STRING --> STRING_FORM<'"','"'>, ''
STRING --> STRING_FORM<"'","'">, ''
STRING --> STRING_FORM<'--[',']--'>, ''

# Terminal
TERMINAL --> LIST<OPT_QUANT_TERMINAL_ATOM>, ','>, ''

OPT_QUANT_TERMINAL_ATOM --> TERMINAL_ATOM, OPT<QUANT>

TERMINAL_ATOM --> STRING, ''
TERMINAL_ATOM --> RANGE, ''
TERMINAL_ATOM --> NONTERMINAL, ''  # looks wierd. Non-syntactically-enforcable rule here: cannot be recursive!
                                   # or the expation will never terminate.

NONTERMINAL  --> ID, OPT<TEMPLATE_PARAM>, OPT<TYPE_SPEC>, ''

ID  --> [_a-zA-Z],[_a-zA-Z0-9]*, ''


TEMPLATE_PARAM --> '<', LIST<ID,','>, '>', ''

TYPE_SPEC --> ':', TYPE
TYPE --> 


# Expression parser stuffs

# Operators
PLUS   : (E\E)/E  -->  '+'
MINUS  : (E\E)/E  -->  '-'

MULT   : (E\E)/E  -->  '*'
DIV    : (E\E)/E  -->  '/'

EXP    : E/(E/E)  -->  '^'

UMINUS : (E/E)    -->  '-'


# Paren-like ops
LPAREN : '(' --> '('
RPAREN : ')' --> ')'

LBRACKET : '(' --> '['
RBRACKET : ')' --> ']'

LCURLY : '(' --> '{'
RCURLY : ')' --> '}'


PLUS, MINUS < MULT,DIV < UMINUS < EXP

UMINUS <-- EXP <-- MULT,DIV  <-- PLUS, MINUS


E --> [1-9][0-9]*


FUNC  --> OPT<ID>, FUNC_PARAMS, FUNC_BODY, ''

blather = (X,Y) -> {      }

func blather(X,Y) { }


# minimum langauge

MIN_LANG --> MIN_PROD, '\n'
MIN_PROD -->  ID '-->' MIN_RANGE OPT<ID> nl
MIN_RANGE --> '['  string, '--', string, ']'


