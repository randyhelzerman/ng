# Non terminal.  Type the start states. Final states implicit in productions with
# only a terminal in the  RHS
NTERM      --> [_a-zA-Z]     NTERM1 : E           # starts with a-zA-Z or _
NTERM1     --> [_a-zA-Z0-9]  NTERM1               # followed by alphanumeric or _
NTERM1     --> ''
       
       
# string literal
STRING     --> "'"  STRING_Q1       : E           # Can use single quote to delimit
STRING_Q1  --> [^'] STRING_Q1
TERM_Q1    --> "'" 
	 	 

STRING      --> '"'  STRING_QQ1     : E           # Can use single quote to delimit
STRING_QQ1  --> [^"] STRING_QQ1
STRING_QQ1  --> '"' 


RANGE         --> '['           RANGE_IS_NEG  :  E
RANGE_IS_NEG  --> '^'           RANGE_LIST          # negative ranges
RANGE1        --> @[^^]         RANGE_LIST          # positive ranges

RANGE_LIST    --> RANGE_KIND    RANGE_LIST          # sends crepy-crwlies up your spine
RANGE_LIST    --> ''

RANGE_KIND  --> [^'-'"'"'"']  RANGE_IS_EX         # first kind of range; single, non special character

RANGE_KIND  --> STRING        RANGE_IS_EX         # can be a string

RANGE_IS_EX --> '-'           RANGE_EX            # parse the other side of the a-b thingy
RANGE_IS_EX --> @[^-]         RANGE_LIST          # see if there is another

RANGE_EX    --> RANGE_KIND    RANGE_LIST



# string starting with '
RANGE

COLON   --> ':'    :   E\E/E            # :

AT      --> '@'    :   E\E/E            # @

UMINUS  --> '-'    :   E/E              # -
BSLASH  --> '\'    :   E/E              # \
BNEG    --> '~'    :   E/E              # bitwise negation
LNEG    --> '!'    :   E/E              # logical negation
EXP     --> '^'    :  E\(E/E)           # Exponentiation
SSTAR 	--> '**'   :  E\(E/E)           # Star Star

MUL     --> '*'    :  (E\E)/E           # Multiplication
DIV     --> '/'    :  (E\E)/E           # Division
FFSLASH --> '//'   :  (E\E)/E           # two forward slashes
REM     --> 'rem'  :  (E\E)/E           # Remainder
MOD     --> 'mod'  :  (E\E)/E           # modulo
MOD     --> '%'    :  (E\E)/E           # modulo
LSHIFT  --> '<<'   :  (E\E)/E           # bitwise left shift
RSHIFT  --> '>>'   :  (E\E)/E           # bitwise right shift
BAND    --> '&'    :  (E\E)/E           # bitwise AND
LAND    --> '&&'   :  (E\E)/E           # logical AND

ADD     --> '+'    :  (E\E)/E           # Addition
SUB     --> '-'    :  (E\E)/E           # Subtraction
BOR     --> '|'    :  (E\E)/E           # bitwise OR
LOR     --> '||'   :  (E\E)/E           # logical OR

GT      --> '>'    :  E\E/E             # greater than
LT      --> '<'    :  E\E/E             # less than
GE      --> '=>'   :  E\E/E             # greater than
LE      --> '<='   :  E\E/E             # less than
 
ASN     --> '='    :  E\E/E             # asignment
EEQ     --> '=='   :  E\E/E             # equal equal

COMMA   --> ','    :  E\(E/E)           # comma

RARROW  --> '->'   :  E\(E/E)           # right arrow
LARROW  --> '<-'   :  E\(E/E)           # right arrow

PROD    --> '-->'  :  P\N/T/N           # production

COLON   --> ':'    :  UKV\K/V           #  Unordered key-value pair
PROD    --> '->'   :  OKVE\K/V          #  ordered key-value pair

PP      --> '\n\n' :  (E\E)/E           #  paragraph break



#  The minimal language

NONTERM  -- > positive_range, 